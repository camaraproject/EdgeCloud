---
openapi: 3.0.3
info:
  title: Application Endpoint Discovery API
  version: wip
  description: |
    # Connect to the Optimal Application Endpoint
    ---
    # Overview
    The Application Endpoint Discovery API extends beyond the capabilities of
    the Simple Edge Discovery API by not only locating the nearest
    Edge Cloud Zone but also providing direct links to your specified
    application's endpoints within those Edge Cloud Zones.
    This API intent enables immediate connection to the most relevant
    application endpoint, optimizing the application's interaction with
    edge computing resources.
    # Introduction
    Operators often host multiple Edge Cloud Zones across various territories.
    Connecting an application directly to the optimal Edge Cloud Zone
    endpoint may minimize latency.
    Unlike the Simple Edge Discovery API, which only provides
    the zone location, this API provides the actual endpoints within
    the nearest zone. This approach ensures that developers can instantly
    integrate these endpoints into their applications, improving the user
    experience.
    After identifying the nearest application endpoint through the API,
    API consumers can:
    * Connect their application client directly to the chosen application
    endpoint, enhancing the responsiveness of the service.
    * If no suitable endpoints are available, the
    developer can use the API EdgeApplicationManagement in order to
    instantiate a new instance.
    Edge Cloud Zone, optimizing their service distribution based on real-time
    network geography.
    # Quick Start
    This API can be leveraged by both client applications on user devices and
    backend application services.
    For accurate service localization, the API requires device-specific
    identifiers such as:
    * `IP-Address`: Public IP address of the user device, which can be fetched
    via
    external IP discovery services.
    * `Phone-Number` : The device's phone number in international E.164 format.
    * `Network-Access-Identifier`: A unique identifier provided by the network
    operator.
    In addition the following application-specific identifiers must be provided
    * `ApplicationEndpointsId`: A unique identifier for the registered
    application endpoint.
    * `AppId` : a unique identifier for the application
    If the API is accessed directly from a device within the operator's
    network, initial requests may be made without explicit device identifiers.
    However,if this results in a `404 Not Found` error, subsequent requests
    should include one of the identifiers to ensure accurate localization of
    the nearest endpoint.

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how
    an API consumer requests an access token. Please refer to
    Identity and Consent Management
    (https://github.com/camaraproject/IdentityAndConsentManagement/)
    for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the
    onboarding process, happening between the API consumer and the
    API provider, taking into account the declared purpose for accessing the
    API, whilst also being subject to the prevailing legal framework dictated
    by local legislation.

    In cases where personal data is processed by the API and users can exercise
    their rights through mechanisms such as opt-in and/or opt-out, the use of
    three-legged access tokens is mandatory. This ensures that the API remains
    in compliance with privacy regulations, upholding the principles of
    transparency and user-centric privacy-by-design.

    # Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of
    the API as follows:
    - When the API is invoked using a two-legged access token, the subject will
    be identified from the optional `device` object, which
    therefore MUST be provided.

    - When a three-legged access token is used however, this optional
    identifier MUST NOT be provided, as the subject will be uniquely
    identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged
    access token to invoke the API by relying on the information that is
    associated with the access token and was identified during the
    authentication process.

    ## Error handling:
    - If the subject cannot be identified from the access token and the
    optional
    `device` object is not included in the request, then the server will return
    an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional
    `device` object is also included in the request, then the server will
    return an error with the `422 UNNECESSARY_IDENTIFIER` error code.
    This will be the case even if the same device is identified by
    these two methods, as the server is unable to make this comparison.

    ---
  contact:
    email: sp-edc@lists.camaraproject.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-camara-commonalities: 0.5
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/EdgeCloud
servers:
  - url: "{apiRoot}/application-endpoint-discovery/vwip"
    variables:
      apiRoot:
        default: https://localhost:443
        description: API root.

tags:
  - name: Application Endpoint Discovery
    description: |
      Find the closest App Instance Endpoint to the user device.
paths:
  /retrieve-closest-app-endpoints:
    post:
      security:
        - openId:
            - application-endpoint-discovery:app-endpoints:read
      operationId: getClosestAppEndpoint
      parameters:
        - name: x-correlator
          in: header
          required: false
          description: |
            When the API Consumer includes the "x-correlator" header in the
            request, the API provider must include it in the response with
            the same value that was used in the request. Otherwise, it is
            optional to include the "x-correlator" header in the response with
             any valid value. Recommendation is to use UUID for values.
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]{0,55}$
            example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndpointDiscoveryInfo"
            examples:
              Identify Device By 3-Legged Access Token and AppId:
                $ref: '#/components/examples/IdentifyDeviceBy3LeggedTokenAppId'
              Identify Device By Phone Number and AppId:
                $ref: '#/components/examples/IdentifyDeviceByPhoneNumberAppId'
              Identify Device By IP Address and ApplicationEndpointsId:
                $ref: '#/components/examples/IdentifyDeviceByIPAddressAppEndpointsId'
              Identify Device By Multiple Identifiers and AppId:
                $ref: '#/components/examples/IdentifyDeviceByMultipleIdentifiersAppId'
      responses:
        "200":
          description: |
           Successful response, returning the closest App Instance Endpoints
           to the user device identified in the request body. The response
           will include the App Instance with the minimum to the end user
           device identified in the request. There can be multiple application
           instances returned in the response and the API consumer can choose
           the one that best suits their needs.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                title: EdgeHostedApplicationEndpoints
                type: array
                items:
                  $ref: "#/components/schemas/EdgeHostedapplication"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "422":
          $ref: "#/components/responses/Generic422"
        "429":
          $ref: "#/components/responses/Generic429"
      tags:
        - Application Endpoint Discovery
      summary: |
        Returns the Endpoint of the closest App Instance to user device
        identified in the request.
      description: |
        On receiving this request, the network will return the name
        of the App Instance with the shortest network path to the end user
        device identified in the request.
components:
  securitySchemes:
    openId:
      description: OpenID Provider Configuration Information.
      type: openIdConnect
      openIdConnectUrl: .well-known/openid-configuration
  headers:
    x-correlator:
      description: |
       When the API Consumer includes the "x-correlator" header in the request,
        the API provider must include it in the response with the same value
        that was used in the request. Otherwise, it is optional to include the
        "X-Correlator" header in the response with any valid value.
        Recommendation is to use UUID for values.
      required: false
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
  schemas:
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of
        devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified
        device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE1: the network operator might support only a subset of these
        options. The API invoker can provide multiple identifiers to be
        compatible across different network operators. In this case the
        identifiers MUST belong to the same device.

        NOTE2: as for this Commonalities release, we are enforcing that
        the networkAccessIdentifier is only part of the schema for
        future-proofing, and CAMARA does not currently allow its use.
        After the CAMARA meta-release work is concluded and the relevant
        issues are resolved, its use will need to be explicitly documented
        in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/SingleIpv6Addr"
      minProperties: 1

    PhoneNumber:
      description: |
        A public identifier addressing a telephone subscription. In mobile
        networks it corresponds to the MSISDN (Mobile Station International
        Subscriber Directory Number). In order to be globally unique it has
        to be formatted in international format, according to E.164
        standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: |
        A public identifier addressing a subscription in a mobile network.
        In 3GPP terminology, it corresponds to the GPSI formatted with the
        External Identifier ({Local Identifier}@{Domain Identifier}). Unlike
        the telephone number, the network access identifier is not subjected
        to portability ruling in force, and is individually managed by each
        operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP
        address and port as seen by the application server, or the private
        (local) and any public (observed) IP addresses in use by the device
        (this information can be obtained by various means, for example from
        some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is
        not in use) then  the same address should be specified for both
        publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its
        publicAddress and publicPort, or separately by its allocated IPv6
        address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least
        one of either privateAddress or publicPort, dependent upon which is
        known. In general, mobile devices cannot be identified by their
        public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    SingleIpv6Addr:
      description: |
        The device should be identified by the observed IPv6 address, or by
        any single IPv6 address from within the subnet allocated to the
        device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    EndpointDiscoveryInfo:
      description: |
        Element to retrieve the closest application endpoint for the
        requested device.
      type: object
      anyOf:
        - required:
          - applicationEndpointsId
        - required:
          - appId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        applicationEndpointsId:
          $ref: "#/components/schemas/ApplicationEndpointsId"
        appId:
          $ref: "#/components/schemas/AppId"

    ApplicationEndpointsId:
      description: |
        A system-defined string identifier representing
        one or more registered Application Endpoints.
      type: string
      format: uuid
      example: "4d596ac1-7822-4927-a3c5-d72e1f922c94"

    AppId:
      type: string
      format: uuid
      description: A globally unique identifier associated
        with the application.
        This GUID will have been previously provided by the
        Edge Cloud Zone provider.
      example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    EdgeHostedapplication:
      description: Edge hosted application represented
        by application Endpoint definition
      type: object
      properties:
        applicationEndpointsId:
          $ref: "#/components/schemas/ApplicationEndpointsId"
        applicationEndpoint:
          $ref: "#/components/schemas/ResourcesApplicationEndpoint"
        applicationServerProviderName:
          type: string
          description: Unique ID representing the Edge
            Application Provider
        appId:
          $ref: "#/components/schemas/AppId"
        applicationDescription:
          type: string
          description: Description of the application Endpoint
          additionalProperties: false
        applicationProfileId:
          $ref: "#/components/schemas/ApplicationProfileId"
        edgeCloudZone:
          $ref: "#/components/schemas/EdgeCloudZone"

    EdgeCloudZone:
      type: object
      description: |
        An Edge Cloud Zone, uniquely identified by a
        combination of the value of the Edge Cloud Zone Id object
        and the value of the Edge Cloud Provider
        object. This value is used to identify an Edge Cloud zone
        between Edge Clouds from different Edge Cloud Providers.
      required:
        - edgeCloudZoneId
        - edgeCloudZoneName
        - edgeCloudProvider
      properties:
        edgeCloudZoneId:
          $ref: "#/components/schemas/EdgeCloudZoneId"
        edgeCloudZoneName:
          $ref: "#/components/schemas/EdgeCloudZoneName"
        edgeCloudZoneStatus:
          $ref: "#/components/schemas/EdgeCloudZoneStatus"
        edgeCloudProvider:
          $ref: "#/components/schemas/EdgeCloudProvider"
        edgeCloudRegion:
          $ref: "#/components/schemas/EdgeCloudRegion"

    EdgeCloudZoneId:
      description: A unique identifier for the Edge Cloud Zone.
      type: string
      format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"

    EdgeCloudRegion:
      description: |
        The EdgeCloudProvider's name for the region where the Edge Cloud
        Zone is located.
      type: string
      pattern: ^[A-Za-z0-9]([A-Za-z0-9-]{0,53}[A-Za-z0-9])?$
      example: "us-west-1"

    EdgeCloudZoneStatus:
      description: Status of the Edge Cloud Zone (default is 'unknown')
      type: string
      enum:
        - active
        - inactive
        - unknown
      default: unknown

    EdgeCloudProvider:
      description: The provider of the Edge Cloud.
      type: string
      pattern: ^[A-Za-z0-9]([A-Za-z0-9-]{0,53}[A-Za-z0-9])?$
      example: "Provider A"

    EdgeCloudZoneName:
      description: The name of the Edge Cloud Zone.
      type: string
      pattern: ^[A-Za-z0-9]([A-Za-z0-9-]{0,53}[A-Za-z0-9])?$
      example: "Zone A"

    ApplicationProfileId:
      description: A unique identifier for the application profile.
      type: string
      format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"
    ResourcesApplicationEndpoint:
      type: object
      description: Information about the application endpoint, including
       URI, FQDN, IP addresses, and port.
      properties:
        uri:
          $ref: "#/components/schemas/Uri"
        fqdn:
          $ref: "#/components/schemas/Fqdn"
        ipv4Address:
          $ref: "#/components/schemas/Ipv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Addr"
        port:
          $ref: "#/components/schemas/Port"
      additionalProperties: false

    ErrorInfo:
      type: object
      description: Error information
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

    Uri:
      type: string
      description: Uniform Resource Identifier.
      example: "https://example.com/resource"
    Fqdn:
      type: string
      description: Fully Qualified Domain Name.
    Ipv4Addr:
      type: string
      description: |
        IP of the device. A single IPv4 address may be specified in
        dotted-quad form 1.2.3.4. Only this exact IP number will match the flow
        control rule.
      example: "198.51.100.1"
    Ipv6Addr:
      type: string
      description: |
        IP of the device. A single IPv6 address, following IETF 5952
        format, may be specified like 2001:db8:85a3:8d3:1319:8a2e:370:7344
      example: "2001:db8:85a3::8a2e:370:7334"
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or
                  query param.
            GENERIC_400_OUT_OF_RANGE:
              description: |
                Out of Range. Specific Syntax Exception used when a
                given field has a pre-defined range or a invalid filter criteria
                combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: |
                Request cannot be authenticated and a new authentication
                is required
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid,
                  or expired credentials. A new authentication is required.
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - INVALID_TOKEN_CONTEXT
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: |
                Permission denied. OAuth2 token access does not have the
                required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to
                 perform this action.
            GENERIC_403_INVALID_TOKEN_CONTEXT:
              description: |
                Reflect some inconsistency between information in
                some field of the API and the related OAuth2 Token
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: "{{field}} is not consistent with access token."
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Some identifier cannot be matched to a device
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Device identifier not found.
    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - IDENTIFIER_MISMATCH
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            GENERIC_422_IDENTIFIER_MISMATCH:
              description: |
                Inconsistency between identifiers not pointing to
                the same device
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: |
                An identifier is not included in the request and the device or phone
                number identification cannot be derived from the 3-legged access
                token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: |
                None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: |
                An explicit identifier is provided when a device or phone
                number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Out of resource quota.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: |
                Access to the API has been temporarily blocked due to rate or spike
                arrest limits being reached
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit reached.
  examples:
    IdentifyDeviceBy3LeggedTokenAppId:
      description: Empty JSON when device is identified by access token
      value:
        appId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    IdentifyDeviceByPhoneNumberAppId:
      description: Identifying device by phone number
      value:
        device:
          phoneNumber: "+123456789"
        appId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    IdentifyDeviceByIPAddressAppEndpointsId:
      description: Identifying device by IP address
      value:
        device:
          ipv4Address:
            publicAddress: "84.125.93.10"
            publicPort: 59765
        applicationEndpointsId: "4d596ac1-7822-4927-a3c5-d72e1f922c94"

    IdentifyDeviceByMultipleIdentifiersAppId:
      description: Identifying device by multiple device identifiers
      value:
        device:
          phoneNumber: "+123456789"
          ipv4Address:
            publicAddress: "84.125.93.10"
            publicPort: 59765
          networkAccessIdentifier: "123456789@domain.com"
        appId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"