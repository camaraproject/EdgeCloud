---
openapi: 3.0.3
info:
  title: Application Endpoint Discovery API
  version: 0.1.0-wip
  description: |
    # Connect to the Optimal Application Endpoint
    ---
    # Overview
    The Application Endpoint Discovery API extends beyond the capabilities of the
    Simple Edge Discovery API by not only locating the nearest Edge Cloud Zone
    but also directly linking to the application endpoints within those
    Edge Cloud Zones.
    This API intent enables immediate connection to the most relevant
    service endpoint, optimizing the application's interaction with
    edge computing resources.
    # Introduction
    Operators often host multiple Edge Cloud Zones across various territories.
    Connecting an application directly to the optimal Edge Cloud Zone
    endpoint may minimize latency.
    Unlike the Simple Edge Discovery API, which only provides the zone location,
    this API provides the actual endpoints within the nearest
    zone. This approach ensures that developers can instantly integrate these
    endpoints into their applications, improving the user
    experience.
    After identifying the nearest application endpoint through the API,
    developers can:
    * Connect their application client directly to the chosen application
    endpoint, enhancing the responsiveness of the service.
    * If no suitable endpoints are available, the
    developer can use the API EdgeApplicationManagement in order to
    instantiate a new instance.
    Edge Cloud Zone, optimizing their service distribution based on real-time
    network geography.
    # Quick Start
    This API can be utilized by both client applications on user devices and
    by servers. It uses a straightforward endpoint:
    `/application-endpoints`.
    For accurate service localization, the API requires device-specific
    identifiers such as:
    * `IP-Address`: Public IP address of the user device, which can be fetched
    via
    external IP discovery services.
    * `Phone-Number` : The device's phone number in international E.164 format.
    * `Network-Access-Identifier`: A unique identifier provided by the network
    operator.
    * `IPv6-Address`: The device's IPv6 address including publicAddress and port number.
    * `IPv4-Address`: The device's IPv4 address.
    * `ApplicationEndpointsID`: A system-defined string identifier representing
        one or more registered Application Endpoints.
  
    If the API is accessed directly from a device within the operator's network,
    initial requests may be made without explicit device identifiers. However,
    if this results in a `404 Not Found` error, subsequent requests should
    include
    one of the identifiers to ensure accurate localization of the nearest
    endpoint.
    
    # Authorization and authentication
    In order to maintain the integrity and security of the Application Discovery
    API, access is governed by robust authentication and authorization
    processes.
    This ensures that only valid, authorized requests are able to interact with
    the API and retrieve application endpoint information.
    ## OpenID Connect
    The API utilizes OpenID Connect on top of OAuth 2.0 for user authentication.
    Users must register to obtain client credentials, which are necessary to
    acquire access tokens from the OpenID provider.
    ## Obtaining Access Tokens
    Access tokens are obtained by submitting a request to the designated OpenID
    Connect URL, utilizing the client credentials. It is imperative that the
    retrieved token is included in the `Authorization` header as a `Bearer`
    token for all subsequent API requests.
    ## Scopes and Permissions
    During the token request, developers will need to specify the scopes that
    correspond to the permissions the application requires. Our API strictly
    enforces scope validation to ensure clients only perform operations that
    are within their granted permissions.
    ## Secure Transmission
    All communication with the API, including token requests, must occur over
    HTTPS to ensure data confidentiality and protection.
    ## Error Handling
    If a request is made without a token or with an expired or invalid token,
    the API will return a  `401 Unauthorized` status code. Similarly, if the
    token does not include the proper scopes for the requested operation,
    a `403 Forbidden` status code will be returned, indicating
    insufficient permissions.
    ---
  contact:
    email: sp-edc@lists.camaraproject.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Product documentation at CAMARA.
  url: https://github.com/camaraproject/EdgeCloud
servers:
  - url: "{apiRoot}/{basePath}"
    variables:
      apiRoot:
        default: https://localhost:443
        description: API root.
      basePath:
        default: application-endpoints/vwip
        description: Base path for the Application Endpoint Discovery.
tags:
  - name: Application Endpoint Discovery
    description: |
      Find the closest App Instance Endpoint to the user device.
paths:
  /application-endpoints:
      post:
        operationId: get-application-endpoints
        parameters:
        - name: x-correlator
          in: header
          required: false
          description: |
            When the API Consumer includes the "x-correlator" header in the
            request, the API provider must include it in the response with
            the same value that was used in the request. Otherwise, it is
            optional to include the "x-correlator" header in the response with
            any valid value. Recommendation is to use UUID for values.
          schema:
            type: string
        - name: Region
          in: query
          required: false
          description: |
            The common name of the closest Edge Cloud Zone to the user device.
          schema:
            $ref: "#/components/schemas/Region"
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
       
        responses:
          '200':
            description: Find optimal Application Endpoints for clients to connect to
            headers:
             x-correlator:
              $ref: "#/components/headers/x-correlator"
            content:
              application/json:
                schema:
                  title: EdgeHostedApplicationEndpoints
                  type: array
                  items:
                        $ref: "#/components/schemas/EdgeHostedapplication"
          "400":
           description: |
            Client eror - the required querystring was not provided
           headers:
            x-correlator:
             $ref: "#/components/headers/x-correlator"
           content:
             application/json:
              schema:
               $ref: "#/components/schemas/ErrorInfo"
              examples:
               InvalidQuerystring:
                summary: Invalid querystring
                description: The 'filter' querystring parameter is
                  missing or does not have a value of 'closest'
                value:
                 status: 400
                 code: INVALID_QUERYSTRING
                 message: "Querystring must be provided: filter=closest"
          "401":
            $ref: "#/components/responses/Generic401"
          "403":
            $ref: "#/components/responses/Generic403"
          "404":
            $ref: "#/components/responses/Generic404"
          "406":
            $ref: "#/components/responses/Generic406"
          "422":
            $ref: "#/components/responses/Generic422"
          "429":
            $ref: "#/components/responses/Generic429"
          "500":
            $ref: "#/components/responses/Generic500"
          "501":
            $ref: "#/components/responses/Generic501"
          "502":
            $ref: "#/components/responses/Generic502"
          "503":
            $ref: "#/components/responses/Generic503"
          "504":
            $ref: "#/components/responses/Generic504"

        tags:
        - Discovery
        summary: Find optimal Application Endpoints for clients to connect to
        description: |
          Returns a list of optimal Application Endpoints that client devices can connect to. 
          You can search using a single application endpoint id or a list of application 
          endpoint ids or combination of application endpoint ids along with device information.
          Edge cloud region name can also be used as another filter to find the optimal 
          application endpoints.

components:
  ######################################################
  #  OAUTH
  #######################################################
  securitySchemes:
    oAuth2:
      type: oauth2
      description: "This API uses OAuth 2 with the
        implicit, password and client credentials grant flow"
      flows:
        implicit:
          authorizationUrl: "https://example.com/oauth/authorize"
          scopes:
            "discovery:read": Grant read-only access to
              discovery data
        password:
          tokenUrl: "https://example.com/oauth/token"
          scopes:
            "discovery:read": Grant read-only access to
              discovery data
        clientCredentials:
          tokenUrl: "https://example.com/oauth/token"
          scopes:
            "discovery:read": Grant read-only access to
              discovery data
  ######################################################
  #  RESOURCES
  #######################################################
  headers:
    x-correlator:
      description: |
        When the API Consumer includes the "x-correlator" header in the request,
        the API provider must include it in the response with the same value t
        hat was used in the request. Otherwise, it is optional to include the
        "x-correlator" header in the response with any valid value.
        Recommendation is to use UUID for values.
      required: false
      schema:
       type: string
  schemas:
    EdgeHostedapplication:
      description: Edge hosted application represented
        by application Endpoint definition
      type: object
      properties:
        applicationEndpointsId:
          $ref: "#/components/schemas/ApplicationEndpointsId"
        applicationEndpoint:
          $ref: "#/components/schemas/ResourcesapplicationEndpoint"
        applicationServerProviderName:
          type: string
          description: Unique ID representing the Edge
            Application Provider
        applicationId:
          type: string
          description: Unique ID representing the Edge Application
        applicationDescription:
          type: string
          description: Description of the application Endpoint
          additionalProperties: false
        applicationProfileId:
          $ref: "#/components/schemas/ApplicationProfileId"
        edgeCloudZoneId:
          $ref: "#/components/schemas/EdgeCloudZoneId"
        edgeCloudZoneName:
          $ref: "#/components/schemas/EdgeCloudZoneName"
        edgeCloudProvider:
          $ref: "#/components/schemas/EdgeCloudProvider"
        Region:
          $ref: "#/components/schemas/Region"

    ResourcesapplicationEndpoint:
      type: object
      description: Information about the application endpoint, including URI, FQDN, IP addresses, and port.
      properties:
        uri:
          type: string
          description: URI of application Endpoint if available
          format: uri
        fqdn:
          type: string
          description: FQDN of application Endpoint if available
        ipv4Address:
          type: string
          description: IPv4 Address of application Endpoint if available
          format: ipv4
        ipv6Address:
          type: string
          description: IPv6 Address of application Endpoint if available
          format: ipv6
        port:
          type: integer
          description: |
            Port information of application Endpoint
            if IPv4 or IPv6 is mentioned
      additionalProperties: false

    EdgeCloudZoneId:
      description: |
        Operator-issued UUID for the Edge Cloud Zone.
      type: string
      format: uuid
      additionalProperties: false

    EdgeCloudZoneName:
      description: |
        The name of the operator or cloud provider of the Edge Cloud Zone.

      type: string
      additionalProperties: false

    EdgeCloudProvider:
      description: |
        The company name of the Edge Cloud Zone provider.
      type: string

    Region:
      description: |
        The common name of the closest Edge Cloud Zone to the user device.  
      type: string
      example: "us-west-1"

    ErrorInfo:
      type: object
      description: Error information
      required:
        - status
        - code
        - message
      properties:
       message:
        type: string
        description: A human readable description of what the event represents
       status:
        type: integer
        description: HTTP response status code
       code:
        type: string
        description: Friendly Code to describe the error

    ApplicationProfileId:
      type: string
      format: uuid
      description: reference id associated to application profile

    ApplicationEndpointsId:
      description: |
        A system-defined string identifier representing
        one or more registered Application Endpoints.
      type: string
      format: uuid

    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device.
      type: object
      properties:
        device:
          type: object
          properties:
            phoneNumber:
             $ref: "#/components/schemas/PhoneNumber"
            networkAccessIdentifier:
             $ref: "#/components/schemas/NetworkAccessIdentifier"
            ipv4Address:
             $ref: "#/components/schemas/DeviceIpv4Addr"
            ipv6Address:
             $ref: "#/components/schemas/DeviceIpv6Address"
        
        applicationEndpointsId:
            $ref: "#/components/schemas/ApplicationEndpointsId"

      required:
        - applicationEndpointsId
      
    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    TypesError:
      type: object
      description: types Error//added desc
      properties:
        code:
          type: string
          description: code //added desc
        message:
          type: string
          description: message //added desc

      required:
        - code
        - message
        - links
      additionalProperties: false

  responses:
    Generic400:
      description: Invalid argument
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: "Invalid argument"

    Generic401:
      description: Unauthorized
      content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
         examples:
          GENERIC_401_UNAUTHENTICATED:
           description: Request cannot be authenticated
           value:
            status: 401
            code: UNAUTHENTICATED
            message: Request not authenticated due to missing, invalid, or expired credentials.
          GENERIC_401_AUTHENTICATION_REQUIRED:
           description: New authentication is needed, authentication is no longer valid
           value:
            status: 401
            code: AUTHENTICATION_REQUIRED
            message: New authentication is required.
      headers:
        x-correlator:
         $ref: "#/components/headers/x-correlator"
    Generic403:
      description: Forbidden
      content:
       application/json:
        schema:
         $ref: "#/components/schemas/ErrorInfo"
        examples:
         GENERIC_403_PERMISSION_DENIED:
          description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
          value:
           status: 403
           code: PERMISSION_DENIED
           message: Client does not have sufficient permissions to perform this action.
         GENERIC_403_INVALID_TOKEN_CONTEXT:
          description: Reflect some inconsistency between information in some field of the API and the related OAuth2 Token
          value:
           status: 403
           code: INVALID_TOKEN_CONTEXT
           message: "{{field}} is not consistent with access token."
      headers:
          x-correlator:
           $ref: "#/components/headers/x-correlator"
    Generic404:
      description: Not found
      content:
       application/json:
        schema:
         $ref: "#/components/schemas/ErrorInfo"
         examples:
          GENERIC_404_NOT_FOUND:
          description: Resource is not found
          value:
            status: 404
            code: NOT_FOUND
            message: The specified resource is not found.
          GENERIC_404_DEVICE_NOT_FOUND:
           description: Device identifier not found
           value:
            status: 404
            code: DEVICE_NOT_FOUND
            message: Device identifier not found.
       headers:
           x-correlator:
            $ref: "#/components/headers/x-correlator"
    Generic406:
      description: Not Acceptable
      content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_406_NOT_ACCEPTABLE:
            description: |
             API Server does not accept the media type (`Accept-*` header) indicated by API client
            value:
             status: 406
             code: NOT_ACCEPTABLE
             message: |
              The server cannot produce a response matching the content requested by the client
              through `Accept-*` headers.
        headers:
            x-correlator:
             $ref: "#/components/headers/x-correlator"
    Generic422:
       description: Unprocessable Content
       content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_422_DEVICE_IDENTIFIERS_MISMATCH:
            description: Inconsistency between device identifiers not pointing to the same device
            value:
             status: 422
             code: DEVICE_IDENTIFIERS_MISMATCH
             message: Provided device identifiers are not consistent.
           GENERIC_422_DEVICE_NOT_APPLICABLE:
            description: Service is not available for the provided device
            value:
             status: 422
             code: DEVICE_NOT_APPLICABLE
             message: The Service is not available for the provided device.
           GENERIC_422_UNIDENTIFIABLE_DEVICE:
            description: The device identifier is not included in the request and the device information cannot be derived from the 3-legged access token
            value:
             status: 422
             code: UNIDENTIFIABLE_DEVICE
             message: The device cannot be identified.
        headers:
         x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic429:
       description: Too Many Requests
       content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_429_QUOTA_EXCEEDED:
            description: Request is rejected due to exceeding a business quota limit
            value:
             status: 429
             code: QUOTA_EXCEEDED
             message: Either out of resource quota or reaching rate limiting.
           GENERIC_429_TOO_MANY_REQUESTS:
            description: API Server request limit is overpassed
            value:
             status: 429
             code: TOO_MANY_REQUESTS
             message: Either out of resource quota or reaching rate limiting.
        headers:
         x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic500:
       description: Internal Server Error
       content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_500_INTERNAL:
            description: Problem in Server side. Regular Server Exception
            value:
              status: 500
              code: INTERNAL
              message: Unknown server error. Typically a server bug.
        headers:
          x-correlator:
           $ref: "#/components/headers/x-correlator"
    Generic501:
       description: Not Implemented
       content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_501_NOT_IMPLEMENTED:
            description: Service not implemented. The use of this code should be avoided as far as possible to get the objective to reach aligned implementations
            value:
             status: 501
             code: NOT_IMPLEMENTED
             message: This functionality is not implemented yet.
       headers:
          x-correlator:
           $ref: "#/components/headers/x-correlator"
    Generic502:
       description: Bad Gateway
       content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_502_BAD_GATEWAY:
            description: Internal routing problem in the Server side that blocks to manage the service properly
            value:
              status: 502
              code: BAD_GATEWAY
              message: An upstream internal service cannot be reached.
       headers:
         x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic503:
       description: Service Unavailable
       content:
        application/json:
         schema:
          $ref: "#/components/schemas/ErrorInfo"
          examples:
           GENERIC_503_UNAVAILABLE:
            description: Service is not available. Temporary situation usually related to maintenance process in the server side
            value:
              status: 503
              code: UNAVAILABLE
              message: Service Unavailable.
       headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
    Generic504:
       description: Gateway Timeout
       content:
         application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
            examples:
             GENERIC_504_TIMEOUT:
              description: API Server Timeout
            value:
              status: 504
              code: TIMEOUT
              message: Request timeout exceeded.
       headers:
        x-correlator:
         $ref: "#/components/headers/x-correlator"
